# -*- coding: utf-8 -*-
"""cnncifar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FgsTSKxVgiIIeDeXW0oG8n9fLLGyaJQ9
"""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import transforms
from torchvision.transforms import ToTensor
from torch import optim
from torchvision import datasets

train_transform = transforms.Compose([
    #augumentare de date
    transforms.RandomHorizontalFlip(), #transformam orizontal pentru ca exista imagini (ex animale, avioane etc) care sunt vazute doar dintr-o parte
    transforms.RandomCrop( 32, 4), #decupare cu pagging
    transforms.RandomRotation(15), #rotatie de la -15 la +15 grade

    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616)),
])

test_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616))
])

train_data = datasets.CIFAR10(
    root = "data",
    train = True,
    download = True,
    transform = train_transform
)

test_data = datasets.CIFAR10(
    root = "data",
    train = False,
    download = True,
    transform = test_transform
)

batch = 100

train_dataloader = DataLoader(train_data, batch_size = batch)
test_dataloader = DataLoader(test_data, batch_size = batch)

class CNN(nn.Module):
    def __init__(self):
        super(CNN,self).__init__()
        self.model = nn.Sequential(
            #nn.Conv2d(3, 32, 3),  # Output: (32, 30, 30)
            #nn.BatchNorm2d(32),
           # nn.ReLU(),

            #nn.Conv2d(32, 64, 3),  # Output: (64, 28, 28)
            #nn.BatchNorm2d(64),
            #nn.ReLU(),
            #nn.MaxPool2d(2),  # Output: (64, 14, 14)

            #nn.Conv2d(64, 128, 3),  # Output: (128, 12, 12)
            #nn.BatchNorm2d(128),
            #nn.ReLU(),
            #nn.MaxPool2d(2),  # Output: (128, 6, 6)

            #nn.Flatten(),  # Output: (128 * 6 * 6) = (4608)
            #nn.Linear(128 * 6 * 6, 256), # Correct input size of 4608!
            #nn.Dropout(0.5),
            #nn.Linear(256, 64),
            #nn.Linear(64, 10)

            nn.Conv2d(3, 32, 3),
            nn.LeakyReLU(),
            nn.BatchNorm2d(32),
            #30

            nn.Conv2d(32, 64, 3),
            nn.LeakyReLU(),
            nn.BatchNorm2d(64),
            #28/2 = 14
            nn.AvgPool2d(2),

            nn.Conv2d(64, 128, 3),
            nn.LeakyReLU(),
            nn.BatchNorm2d(128),
            #12

            nn.Conv2d(128, 128, 3,1,1), # 12-3 = 9 + 2 = 11/1 + 1 = 12
            nn.LeakyReLU(),
            nn.BatchNorm2d(128),

            nn.Conv2d(128,256, 3,1,1), # 12-3 = 9 + 2 = 11/1 + 1 = 12
            nn.LeakyReLU(),
            nn.BatchNorm2d(256),
            #10
            nn.MaxPool2d(2),
            #5

            nn.Conv2d(256, 256, 3),
            nn.LeakyReLU(),
            nn.BatchNorm2d(256),

            #3
            nn.MaxPool2d(2),

            nn.Flatten(),
            nn.Linear(256 * 5 * 5, 256),
            nn.Dropout(0.5),
            nn.Linear(256, 128),
            #nn.Linear(128, 32),
            nn.Linear(128, 10)
        )

    def forward(self, x):
        return self.model(x)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

model = CNN()
model.to(device)

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=1e-3, weight_decay=1e-4)

def train(train_dataloader, model, loss_fn, optimizer):
    size = len(train_dataloader.dataset)
    model.train()
    for batch, (X, y) in enumerate(train_dataloader):
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()

        if batch % 100 == 0:
            loss, current = loss.item(), (batch + 1) * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")

def test(train_dataloader, model, loss_fn):
    size = len(train_dataloader.dataset)
    num_batches = len(train_dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in train_dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

epochs = 50
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)
print("Done!")